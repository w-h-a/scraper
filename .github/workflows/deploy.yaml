name: Deploy

on:
  push:
    branches: [main]

concurrency: 
  group: ${{ github.workflow }}
  cancel-in-progress: false

env:
  DOCKER_IMAGE_NAME: golang-job-scraper 
  DOCKER_REPO_PATH: ${{ secrets.DOCKER_USERNAME }}/golang-job-scraper 
  
jobs:
  semver_tag:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      new_tag: ${{ steps.tagger.outputs.next }}
      is_released: ${{ steps.tagger.outputs.next != steps.tagger.outputs.current }} 
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Calculate Semantic Version Bump
        id: tagger
        uses: ietf-tools/semver-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          noVersionBumpBehavior: current 
          
      - name: Create GitHub Release
        if: ${{ steps.tagger.outputs.next != steps.tagger.outputs.current }} 
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tagger.outputs.next }}
          generate_release_notes: true

  build_push:
    runs-on: ubuntu-latest
    needs: [semver_tag]
    if: needs.semver_tag.outputs.is_released == 'true'
    outputs:
      image_tag: ${{ needs.semver_tag.outputs.new_tag }}
      app_version: ${{ needs.semver_tag.outputs.new_tag }} 
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker image
        env:
          IMAGE_TAG: ${{ needs.semver_tag.outputs.new_tag }}
        run: |
          FULL_IMAGE_TAG=${{ env.DOCKER_REPO_PATH }}:${{ env.IMAGE_TAG }}
          docker build -t $FULL_IMAGE_TAG .
          docker push $FULL_IMAGE_TAG
          echo "IMAGE_FULL_TAG=$FULL_IMAGE_TAG" >> $GITHUB_ENV 

  deploy:
    runs-on: ubuntu-latest
    needs: [build_push]
    if: needs.semver_tag.outputs.is_released == 'true'
    steps:
      - name: Set Deployment Variables
        run: |
          echo "IMAGE_TAG=${{ needs.build_push.outputs.image_tag }}" >> $GITHUB_ENV
          echo "FULL_IMAGE_PATH=${{ env.DOCKER_REPO_PATH }}:${{ needs.build_push.outputs.image_tag }}" >> $GITHUB_ENV
          echo "APP_VERSION=${{ needs.build_push.outputs.app_version }}" >> $GITHUB_ENV
          echo "APP_NAME=${{ env.DOCKER_IMAGE_NAME }}" >> $GITHUB_ENV
        
      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.DO_SSH_KEY }}
          known_hosts: ${{ secrets.DO_HOST }} 

      - name: Deploy Container
        run: |
          IMAGE_PATH=${{ env.FULL_IMAGE_PATH }}
          APP_NAME=${{ env.APP_NAME }} 
          
          ssh -o StrictHostKeyChecking=no ${{ secrets.DO_USERNAME }}@${{ secrets.DO_HOST }} "\
            echo 'Starting deployment for $IMAGE_PATH...' && \
            
            docker stop $APP_NAME 2>/dev/null || true && \
            docker rm $APP_NAME 2>/dev/null || true && \
            
            docker pull $IMAGE_PATH && \
            
            docker run -d \
              --name $APP_NAME \
              -v /etc/job-scraper/secrets/service_account_key.json:/app/service_account_key.json:ro \
              \
              -e ENV='prod' \
              -e NAME='$APP_NAME' \
              -e VERSION='${{ env.APP_VERSION }}' \
              -e LOGS_ADDRESS='api.honeycomb.io' \
              -e LOGS_API_KEY_HEADER='x-honeycomb-team' \
              -e LOGS_API_KEY_VALUE='${{ secrets.HONEYCOMB_API_KEY }}' \
              -e TRACES_ADDRESS='api.honeycomb.io' \
              -e TRACES_API_KEY_HEADER='x-honeycomb-team' \
              -e TRACES_API_KEY_VALUE='${{ secrets.HONEYCOMB_API_KEY }}' \
              -e READ_WRITER_LOCATION='${{ secrets.PROD_SHEET_ID }}' \
              -e SHEETS_SERVICE_ACCOUNT_KEY_PATH='/app/service_account_key.json' \
              \
              $IMAGE_PATH && \
            
            echo 'Deployment complete. Container is running and configured.'"
